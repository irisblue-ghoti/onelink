services:
  # 前端服务
  frontend:
    image: nfc-frontend
    ports:
      - "3000:3000"
    depends_on:
      - apisix
    environment:
      - NODE_ENV=production
    networks:
      - nfc_network

  # API网关
  apisix:
    image: apache/apisix:3.6.0-debian
    ports:
      - "9080:9080"
      - "9443:9443"
    volumes:
      - ./apisix/plugins:/usr/local/apisix/plugins
      - ./apisix/routes:/usr/local/apisix/routes
    environment:
      - APISIX_STAND_ALONE=true
      - APISIX_LISTEN_ADDRESS=0.0.0.0
    networks:
      - nfc_network

  # 内容服务
  content-service:
    image: nfc-content-service
    ports:
      - "8081:8081"
    volumes:
      - ./config:/app/config:ro
    environment:
      - SERVER_PORT=8081
      - CONFIG_PATH=/app/config/content-service.yaml
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - nfc_network
    restart: on-failure
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8081/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s

  # 商户服务
  merchant-service:
    build:
      context: ./backend/merchant-service
    image: nfc-merchant-service
    ports:
      - "8082:8082"
    volumes:
      - ./config:/app/config:ro
    environment:
      - SERVER_PORT=8082
      - CONFIG_PATH=/app/config/merchant-service.yaml
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - nfc_network
    restart: on-failure
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8082/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s

  # NFC服务
  nfc-service:
    build:
      context: ./backend/nfc-service
    image: nfc-nfc-service
    ports:
      - "8083:8083"
    volumes:
      - ./config:/app/config:ro
    environment:
      - SERVER_PORT=8083
      - CONFIG_PATH=/app/config/nfc-service.yaml
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - nfc_network
    restart: on-failure
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8083/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s

  # 统计服务
  stats-service:
    build:
      context: ./backend/stats-service
    image: nfc-stats-service
    ports:
      - "8084:8084"
    volumes:
      - ./config:/app/config:ro
    environment:
      - SERVER_PORT=8084
      - CONFIG_PATH=/app/config/stats-service.yaml
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - nfc_network
    restart: on-failure
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8084/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s

  # 分发服务
  distribution-service:
    build:
      context: ./backend/distribution-service
    image: nfc-distribution-service
    ports:
      - "8085:8085"
    volumes:
      - ./config:/app/config:ro
    environment:
      - SERVER_PORT=8085
      - CONFIG_PATH=/app/config/distribution-service.yaml
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - nfc_network
    restart: on-failure
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8085/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s

  # PostgreSQL数据库
  postgres:
    image: postgres:14
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=nfc_card
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres:/docker-entrypoint-initdb.d
    networks:
      - nfc_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis缓存
  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - nfc_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Kafka消息队列
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
    depends_on:
      - zookeeper
    networks:
      - nfc_network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 10s
      retries: 5

  # Zookeeper (Kafka依赖)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
    networks:
      - nfc_network
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 | grep imok"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Nacos服务注册中心
  nacos:
    image: nacos/nacos-server:v2.5.1-slim
    ports:
      - "8848:8848"
      - "9848:9848"
      - "9849:9849"
    environment:
      - MODE=standalone
      - PREFER_HOST_MODE=hostname
      - JVM_XMS=512m
      - JVM_XMX=512m
      - JVM_XMN=256m
    volumes:
      - nacos_data:/home/nacos/data
      - ./nacos-conf/application.properties:/home/nacos/conf/application.properties
    networks:
      - nfc_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8848/nacos/v1/console/health/status"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  # MinIO对象存储
  minio:
    image: minio/minio:RELEASE.2023-07-21T21-12-44Z
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - nfc_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

volumes:
  postgres_data:
  redis_data:
  zookeeper_data:
  zookeeper_log:
  nacos_data:
  minio_data:

networks:
  nfc_network:
    driver: bridge 